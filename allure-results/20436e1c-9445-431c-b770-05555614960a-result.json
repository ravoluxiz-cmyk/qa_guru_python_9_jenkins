{"name": "Successful fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#hobbiesWrapper')).element(('xpath', './/*[text()[normalize-space(.) = concat(\"\", \"Sports\")]]')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (782, 579). Other element would receive the click: <td>...</td>\n  (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nScreenshot: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.png\nPageSource: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.html", "trace": "fn = <selene.core.wait.Command object at 0x105575f10>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n                       ^^^^^^^^^^^^^^^\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py:61: in __call__\n    return self._fn(entity)\n           ^^^^^^^^^^^^^^^^\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/entity.py:525: in raw_click\n    element.locate().click()\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x10554a350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...00019530fc0c _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x000000019530ab80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (782, 579). Other element would receive the click: <td>...</td>\nE         (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100e87598 cxxbridge1$str$ptr + 2894960\nE       1   chromedriver                        0x0000000100e7f4d4 cxxbridge1$str$ptr + 2861996\nE       2   chromedriver                        0x00000001009a55ec _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 74324\nE       3   chromedriver                        0x00000001009f2b0c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 391028\nE       4   chromedriver                        0x00000001009f1074 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 384220\nE       5   chromedriver                        0x00000001009eee84 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 375532\nE       6   chromedriver                        0x00000001009ee27c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 372452\nE       7   chromedriver                        0x00000001009e2cc0 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 325928\nE       8   chromedriver                        0x00000001009e274c _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 324532\nE       9   chromedriver                        0x0000000100a2e458 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 635072\nE       10  chromedriver                        0x00000001009e1178 _RNvCs47EqcsrPRmA_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 318944\nE       11  chromedriver                        0x0000000100e4b2e4 cxxbridge1$str$ptr + 2648508\nE       12  chromedriver                        0x0000000100e4e8c0 cxxbridge1$str$ptr + 2662296\nE       13  chromedriver                        0x0000000100e2bd64 cxxbridge1$str$ptr + 2520124\nE       14  chromedriver                        0x0000000100e4f1a8 cxxbridge1$str$ptr + 2664576\nE       15  chromedriver                        0x0000000100e1d4d4 cxxbridge1$str$ptr + 2460588\nE       16  chromedriver                        0x0000000100e6eb94 cxxbridge1$str$ptr + 2794092\nE       17  chromedriver                        0x0000000100e6ed18 cxxbridge1$str$ptr + 2794480\nE       18  chromedriver                        0x0000000100e7f120 cxxbridge1$str$ptr + 2861048\nE       19  libsystem_pthread.dylib             0x000000019530fc0c _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x000000019530ab80 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nsetup_browser = <selene.core._browser.Browser object at 0x10554ad50>\n\n    @allure.title(\"Successful fill form\")\n    def test_successful(setup_browser):\n        browser = setup_browser\n        first_name = \"Alex\"\n        last_name = \"Egorov\"\n    \n        with allure.step(\"Open registrations form\"):\n            browser.open(\"https://demoqa.com/automation-practice-form\")\n            browser.element(\".practice-form-wrapper\").should(have.text(\"Student Registration Form\"))\n            browser.driver.execute_script(\"$('footer').remove()\")\n            browser.driver.execute_script(\"$('#fixedban').remove()\")\n    \n        with allure.step(\"Fill form\"):\n            browser.element(\"#firstName\").set_value(first_name)\n            browser.element(\"#lastName\").set_value(last_name)\n            browser.element(\"#userEmail\").set_value(\"alex@egorov.com\")\n            browser.element(\"#genterWrapper\").element(by.text(\"Other\")).click()\n            browser.element(\"#userNumber\").set_value(\"1231231230\")\n            # browser.element(\"#dateOfBirthInput\").click()\n            # browser.element(\".react-datepicker__month-select\").s(\"July\")\n            # browser.element(\".react-datepicker__year-select\").selectOption(\"2008\")\n            # browser.element(\".react-datepicker__day--030:not(.react-datepicker__day--outside-month)\").click()\n            browser.element(\"#subjectsInput\").send_keys(\"Maths\")\n            browser.element(\"#subjectsInput\").press_enter()\n>           browser.element(\"#hobbiesWrapper\").element(by.text(\"Sports\")).click()\n\ntests/demoqa/test_registration_form.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/entity.py:540: in click\n    self.wait.for_(\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfn = <selene.core.wait.Command object at 0x105575f10>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#hobbiesWrapper')).element(('xpath', './/*[text()[normalize-space(.) = concat(\"\", \"Sports\")]]')).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (782, 579). Other element would receive the click: <td>...</td>\nE                     (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE                   Screenshot: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.png\nE                   PageSource: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.html\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py:148: TimeoutException"}, "steps": [{"name": "Open registrations form", "status": "passed", "start": 1759910752434, "stop": 1759910755619}, {"name": "Fill form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#hobbiesWrapper')).element(('xpath', './/*[text()[normalize-space(.) = concat(\"\", \"Sports\")]]')).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <label title=\"\" for=\"hobbies-checkbox-1\" class=\"custom-control-label\">...</label> is not clickable at point (782, 579). Other element would receive the click: <td>...</td>\n  (Session info: chrome=141.0.7390.55); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nScreenshot: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.png\nPageSource: file:///Users/dmitry/.selene/screenshots/1759910749662/1759910749662.html\n\n", "trace": "  File \"/Users/dmitry/qa_guru_python_9_jenkins-4/tests/demoqa/test_registration_form.py\", line 29, in test_successful\n    browser.element(\"#hobbiesWrapper\").element(by.text(\"Sports\")).click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/entity.py\", line 540, in click\n    self.wait.for_(\n    ~~~~~~~~~~~~~~^\n        command.js.click(xoffset=xoffset, yoffset=yoffset)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    ...<8 lines>...\n        )\n        ^\n    )\n    ^\n  File \"/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^\n  File \"/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selene/core/wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1759910755619, "stop": 1759910760325}], "start": 1759910752434, "stop": 1759910760328, "uuid": "a3ab44b1-d3e5-4010-a0ca-1caa403306ba", "historyId": "6fe5a9365b874ddd38dec6751b552478", "testCaseId": "6fe5a9365b874ddd38dec6751b552478", "fullName": "tests.demoqa.test_registration_form#test_successful", "labels": [{"name": "parentSuite", "value": "tests.demoqa"}, {"name": "suite", "value": "test_registration_form"}, {"name": "host", "value": "MacBook-Air.local"}, {"name": "thread", "value": "43889-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.demoqa.test_registration_form"}], "titlePath": ["tests", "demoqa", "test_registration_form.py"]}